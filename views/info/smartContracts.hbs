<div class="w3-card w3-panel header">
    <h3>Smart Contracts</h3>

    <p>Smart contracts are immutable applications that run as programmed without the possibility of censorship,
    downtime or third-party interference. These applications are stored on the blockchain and executed on the Ethereum Virtual Machine (EVM),
    using the crypto-fuel, Ether, to pay for transactions. Code running inside the EVM is sandboxed and has no access to networks,
    filesystem or other processes. Smart contracts are programmed in the contract-oriented, high-level language,
    Solidity, before being compiled to the Turing-complete bytecode language called EVM bytecode.
    </p>

    <pre><code class="javascript">
pragma solidity ^0.4.0;

contract SimpleStorage {
    uint storedData;

    function set(uint x) public {
        storedData = x;
    }

    function get() public constant returns(uint){
        return storedData;
    }
}
</code></pre>
    <br>
    <h3>Transfering Ether</h3>
    <p>
    Solidity has several functions that can be used to transfer ether [4](Ethereum, 2018):
    <pre><code>&lt;address>.transfer(uint256 amount):</code></pre>
    The transfer function sends the amount in Wei to the given address, forwards 2300 gas stipend and throws on failure.
    <pre><code class="typescript">&lt;address>.send(uint256 amount) returns (bool):</code></pre>
    The send function sends the amount in Wei to the given address, forwards 2300 gas stipend and returns  false on failure.
    The send function transfer fails if the call stack depth is at 1024, or if the recipient runs out of gas. To make safer ether transfers, the return value should always be checked, or the transfer() function should be used.
    <pre><code>&lt;address>.call(...) returns (bool):</code></pre>
    The call function issues a low-level call, forwarding all available gas and returns false on failure. This is mostly used by contracts to invoke function of other contracts that require large amounts of gas to pass the transaction.
    <pre><code>&lt;address>.callcode(...) returns (bool):</code></pre>
    The call function is similar to call, and issues a low-level callcode, forwarding all available gas and returns false on failure. This use of this function is discouraged and will be deprecated in the future.
    <pre><code>&lt;address>.delegatecall(...) returns (bool):</code></pre>
    The delegatecall function issues a low-level delegatecall, forwarding all available gas and returns false on failure.
    It is important to note that when a smart contract receives ether without data using any of these functions, the fallback address is invoked automatically. The fallback address has no name assigned to it and cannot have arguments, however can still execute complex operations as long as enough gas is passed to it.
    </p>
</div>
<script>
hljs.initHighlightingOnLoad();
</script>