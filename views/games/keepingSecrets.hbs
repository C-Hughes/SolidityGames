<div class="w3-container w3-margin w3-card-4 header">
    <br>
    <h2>Beat This Level</h2>
    <p>Claim ownership of the contract</p>
    <button id="hintButton" class="w3-button w3-red" onclick="getHint();">Hint</button>
    <div id="HintText" style="display: none;">HintText</div>
</div>

<div class="w3-panel w3-card-4 header w3-margin">
    <h4>keepingSecrets.sol</h4>
    <div id="deployedContractAddress" class="w3-margin"><button id="deployButton" onclick="deployContract();" class="w3-button w3-orange w3-margin">Deploy</button></div>
    <div id="transactionInfo" class="w3-margin"></div>
    <div id="userErrors" class="w3-text-red w3-margin"></div>
    <div id="contractInterface"></div>

    <pre><code class="typescript Tomorrow">
pragma solidity ^0.5.2;

contract WarmUp {
    address public owner;
    mapping(address => uint) public contributions;

    constructor() public {
        owner = 0xcCF90925D0756bd69D1f3d0fD965672f34d32C4E;
    }

    function viewContribution() public view returns (uint) {
        return contributions[msg.sender];
    }

    function addToPot() public payable {
        require(msg.value > 0);
        contributions[msg.sender] += msg.value;
    }

    function claimOwnership() public payable {
        require(msg.value > 0 && contributions[msg.sender] > 0);
        owner = msg.sender;
    }
}
</code></pre>
</div>
<script>
hljs.initHighlightingOnLoad();

var abi = [{"constant":false,"inputs":[],"name":"addToPot","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"contributions","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimOwnership","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"viewContribution","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}];
var keepingSecretsContract = web3.eth.contract(abi);
var keepingSecretsInstance;

function deployContract() {
var keepingSecrets = keepingSecretsContract.new(
    {
        from: web3.eth.accounts[0],
        data: '0x608060405234801561001057600080fd5b5073ccf90925d0756bd69d1f3d0fd965672f34d32c4e6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610311806100746000396000f3fe608060405260043610610067576000357c01000000000000000000000000000000000000000000000000000000009004806317ebf6ae1461006c57806342e94c90146100765780634e71e0c8146100db5780638da5cb5b146100e5578063a93138341461013c575b600080fd5b610074610167565b005b34801561008257600080fd5b506100c56004803603602081101561009957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506101c5565b6040518082815260200191505060405180910390f35b6100e36101dd565b005b3480156100f157600080fd5b506100fa610279565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561014857600080fd5b5061015161029e565b6040518082815260200191505060405180910390f35b60003411151561017657600080fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550565b60016020528060005260406000206000915090505481565b60003411801561022c57506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b151561023757600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509056fea165627a7a72305820a1c9a5fe0802438061ca3f19ec0d03e724ec1357db0990ae7bb0833ad5560fd40029',
        gas: '4700000'
    }, function (e, contract) {
        console.log(e, contract);
        transactionPending(contract);
        if (typeof contract.address !== 'undefined') {
            console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
            //Add dApp Address to Local Storage
            localStorage.setItem("keepingSecretsAddr", contract.address);
            getInstance();
            document.getElementById('transactionInfo').innerHTML = "";
            updateUI();
        }
    })
}

function transactionPending(contract){
    var Tx = contract.transactionHash;
    document.getElementById('transactionInfo').innerHTML = "<i class=\"fas fa-spinner w3-spin\"></i> Transaction <a target=\"_blank\" rel=\"noopener noreferrer\" href='https://ropsten.etherscan.io/tx/"+Tx+"'>" + Tx + "</a>  Pending... (This can take a minute)";
}

function updateUI(){
    //Display dApp UI
    var x = document.getElementById("contractInterface");
    x.innerHTML = '<div class="w3-bar">\n' +
            '    <div class="w3-bar-item">\n' +
            '      <button class="w3-button w3-red" onclick="addToPot();">addToPot()</button>\n' +
            '    </div>\n' +
            '    <div class="w3-bar-item">\n' +
            '      <input id="addToPotInput" onclick="clearErrors();" placeholder="0.001" class="w3-input w3-border" style="width:150px" type="text">\n' +
            '    </div>\n' +
            '  </div>\n' +
            '  <div class="w3-bar">\n' +
            '    <div class="w3-bar-item">\n' +
            '      <button onclick="claimOwnership();" class="w3-button w3-red">claimOwnership()</button>\n' +
            '    </div>\n' +
            '    <div class="w3-bar-item">\n' +
            '      <input id="claimOwnershipInput" class="w3-input w3-border" placeholder="Message Value" style="width:150px" type="text">\n' +
            '    </div>\n' +
            '  </div>\n' +
            '  <div class="w3-bar">\n' +
            '    <div class="w3-bar-item">\n' +
            '      <button onclick="viewContributions();" class="w3-button w3-blue">viewContribution()</button>\n' +
            '    </div>\n' +
            '    <div class="w3-bar-item">\n' +
            '      <div id="viewContributions"></div>\n' +
            '    </div>\n' +
            '    <div id="contractOwner" class="w3-bar-item"></div>\n' +
            '  </div>\n' +
            '  <div class="w3-bar">\n' +
            '    <div class="w3-bar-item">\n' +
            '      <button onclick="viewOwner()" class="w3-button w3-blue">owner</button>\n' +
            '    </div>\n' +
            '    <div class="w3-bar-item">\n' +
            '      <div id="viewOwner"></div>\n' +
            '    </div>\n' +
            '  </div>';
    document.getElementById('deployedContractAddress').innerHTML = "Address: <a target=\"_blank\" rel=\"noopener noreferrer\" href='https://ropsten.etherscan.io/address/"+keepingSecretsInstance.address+"'>" + keepingSecretsInstance.address + "</a>";
}
//If the contract has already been deployed, get instance from localstorage variable
function getInstance(){
    var keepingSecretsAddr = localStorage.getItem("keepingSecretsAddr");
    keepingSecretsInstance = keepingSecretsContract.at(keepingSecretsAddr);
    console.log(keepingSecretsInstance);

    //return warmUpInstance;
}

/*
const getTransactionReceipt = async (hash) => {
    let receipt = null;
    while (receipt === null) {
        // we are going to check every second if transation is mined or not, once it is mined we'll leave the loop

            receipt = await getTransactionReceiptPromise(hash);


        //await wait(1000);
    }
    return receipt;
};

function getTransactionReceiptPromise(hash) {
    // here we just promisify getTransactionReceipt function for convenience
    return new Promise(((resolve, reject) => {
        web3.eth.getTransactionReceipt(hash, function(err, data) {
            resolve(data);
        });
    }));
}

async function addToPot(){
    //console.log('calling');
    //var result = await resolveAfter2Seconds();
    //console.log(result);
    var hash;
    keepingSecretsInstance.addToPot({value: 10000000, gas: 212720}, function(err, result){
        hash = result;
    });
    const receipt = await getTransactionReceipt(hash);
    alert(receipt);
}
*/
function addToPot(){
    keepingSecretsInstance.addToPot({value: 1000000, gas: 212720}, function(error, result){
        if (!error) {
            document.getElementById('transactionInfo').innerHTML = "<i class=\"fas fa-spinner w3-spin\"></i> Transaction <a target=\"_blank\" rel=\"noopener noreferrer\" href='https://ropsten.etherscan.io/tx/"+result+"'>" + result + "</a>  Pending... (This can take a minute)";
            getTransaction(result);
        } else {
            document.getElementById('transactionInfo').innerHTML = '<pre>' + error + '</pre>'
        }});
}

function getTransaction(hash){
    //var hash = "0x538e8bfe3aad8438de24b4775e4433d63d8fd006a69d8b9913866d1cdae441ff";
    var transactionInterval = setInterval(function() {
        web3.eth.getTransactionReceipt(hash, function(err, data) {
            if(data){
                console.log(data.blockNumber);
                clearInterval(transactionInterval);
                document.getElementById('transactionInfo').innerHTML = "<i class=\"fas fa-check w3-text-green\"></i> Transaction Successful";
            }
        });
        console.log(1);
    }, 2000);
}
//Check LocalStorage to see if the contract has been deployed.
if (localStorage.getItem("keepingSecretsAddr")){
    //Add Contract to web3.eth.contract
    getInstance();
    updateUI();
}

//getR();
</script>