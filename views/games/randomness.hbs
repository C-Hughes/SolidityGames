<div id="levelCompleteModal" class="w3-modal">
    <div class="w3-modal-content w3-card-4 w3-animate-zoom">
        <header class="w3-container w3-indigo">
        <span onclick="document.getElementById('levelCompleteModal').style.display='none'"
              class="w3-button w3-display-topright">&times;</span>
            <h2>Congratulations!</h2>
        </header>
        <div class="w3-container header">
            <p>You completed randomness!</p>
            <p>The blockchain does not provide any cryptographically secure source of randomness. Currently developers create pseudo randomness that is considered ‘good enough’ by hashing variables that are unique, or difficult to manipulate such as; transaction timestamps, sender addresses and block height. If the way a contract generates randomness is known, it is possible to create a contract that will generate the same randomness.</p>
            <p>Another common way of trying to generate randomness is with commit and reveal schemes. This is where the users submit a hash of their secret. Later the users must reveal their secret and the pseudo-random number is generated by combining the secrets of all the users. Therefore no participants can see how their contribution will affect the end result until after everyone has already submitted a value. However this is also vulnerable to a denial of service attack, as if one of the users doesn’t reveal their secret, the contract will not be able to generate a random number.</p>
            <p>An example of this is a<a href="http://swende.se/blog/Breaking_the_house.html"> roulette contract</a> that had a public RNG seed.</p>
        </div>
        <footer class="w3-container w3-padding w3-indigo">
            <a href="/survey" class="w3-button w3-left w3-amber">I've Had Enough</a><a href="/games/simpleDAO" class="w3-button w3-right w3-green">Next Level</a>
        </footer>
    </div>
</div>

<div class="w3-container w3-margin w3-card-4 header">
    <div class="w3-cell-row">
        <div class="w3-cell w3-cell-bottom">
            <h2>Randomness</h2>
        </div>
        <div class="w3-cell w3-cell-middle" style="text-align: right">
            Difficulty: <span class="w3-tag w3-amber">6/10</span>
        </div>
    </div>
    <button id="levelWonBtn" onclick="document.getElementById('levelCompleteModal').style.display='block';" style="display:none;" class="w3-button w3-green">View Winning Message</button>

    <hr>

    <div class="w3-cell-row">
        <div class="w3-cell w3-cell-bottom">
            <h3>Beat This Level</h3>
        </div>
        <div class="w3-cell w3-cell-middle" style="text-align: right">
            <button id="levelFeedbackBtn" onclick="submitLvlFeedback();" class="w3-button w3-indigo w3-right">Submit level feedback</button>
        </div>
    </div>
    <div id="levelFeedback" style="display:none;">
        <form action="/games/randomness" method="post">
            <textarea style="width:100%;" rows="4" name="levelFeedback"></textarea>
            <button type="submit" class="w3-button w3-green">Submit</button>
        </form>
    </div>
    <p>To beat this level, correctly guess the random number 10 times in a row.</p>
    <p>You will need to create and deploy your own smart contract to beat this level. Use <a target="_blank" rel="noopener noreferrer" href="https://remix.ethereum.org">Remix</a> to do this.</p>

    <button id="hintButton" class="w3-button w3-amber w3-margin" onclick="getHint();">Get Hint (2)</button>
    <div id="HintText" style="display: none;"></div>
</div>

<div class="w3-panel w3-card-4 header w3-margin">
    <h4>Randomness.sol</h4>
    <div id="deployedContractAddress" class="w3-margin"><button id="deployButton" onclick="deployContract();" class="w3-button w3-orange w3-margin">Deploy</button></div>
    <div id="transactionInfo" class="w3-margin secondary"></div>
    <div id="userErrors" class="w3-text-red w3-margin"></div>
    <div id="contractInterface" style="display: none;">
        <div class="w3-bar">
            <div class="w3-bar-item">
                <button onclick="checkWins();" class="w3-button w3-blue">View Wins</button>
            </div>
            <div class="w3-bar-item">
                <div id="checkWins"></div>
            </div>
            <div class="w3-bar">
                <div class="w3-bar-item">
                    <button onclick="generateRandom();" class="w3-button w3-blue">Generate Random</button>
                </div>
                <div class="w3-bar-item">
                    <div id="generateRandom"></div>
                </div>
            </div>
            <div class="w3-bar">
                <div class="w3-bar-item">
                    <button onclick="guessNumber();" class="w3-button w3-red">guessNumber()</button>
                </div>
                <div class="w3-bar-item">
                    <input id="guessNumberInput" onclick="clearErrors();" class="w3-input w3-border" placeholder="Guess (1-10)" style="width:150px" type="text">
                </div>
            </div>
        </div>
    </div>

    <pre><code class="Javascript Tomorrow">
pragma solidity 0.5.4;

contract Randomness {
    uint256 public wins;

    constructor() public {
        uint8 wins = 0;
    }

    function generateRandom() public view returns(uint) {
        uint blockNum = block.number - 1;
        uint randomNumber = uint(blockhash(blockNum)) % 10 + 1;
        return randomNumber;
    }

    function guessNumber(uint8 _guess) public returns(bool) {
        require(_guess <= 10);

        if (_guess == generateRandom()) {
            wins ++;
            return true;
        } else {
            wins = 0;
            return false;
        }
    }
}
</code></pre>
</div>
<script>
hljs.initHighlightingOnLoad();

var abi = [{"constant":true,"inputs":[],"name":"generateRandom","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"wins","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_guess","type":"uint8"}],"name":"guessNumber","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}];
var randomnessContract = web3.eth.contract(abi);
var randomnessInstance;

function deployContract() {
    var randomness = randomnessContract.new(
    {
        from: web3.eth.accounts[0],
        data: '0x608060405234801561001057600080fd5b5060008081905550610196806100276000396000f3fe608060405234801561001057600080fd5b506004361061005e576000357c01000000000000000000000000000000000000000000000000000000009004806302e4af011461006357806324de908d1461008157806394707dab1461009f575b600080fd5b61006b6100e8565b6040518082815260200191505060405180910390f35b610089610112565b6040518082815260200191505060405180910390f35b6100ce600480360360208110156100b557600080fd5b81019080803560ff169060200190929190505050610118565b604051808215151515815260200191505060405180910390f35b60008060014303905060006001600a83406001900481151561010657fe5b06019050809250505090565b60005481565b6000600a8260ff161115151561012d57600080fd5b6101356100e8565b8260ff16141561015957600080815480929190600101919050555060019050610165565b60008081905550600090505b91905056fea165627a7a72305820c8dd41a87e513e8220afdd30ac9be579fd353256d0ca7cec8755a0d1acde55410029',
        gas: '4700000',
        gasPrice: 21000000000
    }, function (e, contract) {
        console.log(e, contract);
        document.getElementById('transactionInfo').innerHTML = "<i class=\"fas fa-spinner w3-spin\"></i> <a target=\"_blank\" rel=\"noopener noreferrer\" href='https://"+networkURL+".etherscan.io/tx/"+contract.transactionHash+"'>" + contract.transactionHash + "</a>  Pending... (This can take a minute)";
        document.getElementById('deployedContractAddress').innerHTML = "<h3 class='w3-text-red'>Deploying... Please do not close this page.</h3>";
        if (typeof contract.address !== 'undefined') {
            console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
            //Add dApp Address to Local Storage
            localStorage.setItem("randomnessAddr", web3.toChecksumAddress(contract.address));
            getInstance();
            document.getElementById('transactionInfo').innerHTML = "";
            updateUI();
        }
    })
}

function updateUI(){
    if (localStorage.getItem("randomnessComplete")) {
        document.getElementById('levelWonBtn').style.display = 'block';
    }
    refreshInfo();
    //Display dApp UI
    document.getElementById("contractInterface").style.display = "block";
    document.getElementById('deployedContractAddress').innerHTML = "Address: <a target=\"_blank\" rel=\"noopener noreferrer\" href='https://"+ localStorage.getItem('networkURL') +".etherscan.io/address/"+randomnessInstance.address+"'>" + randomnessInstance.address + "</a>" +
            " <i id='copyBtn' title='Copy Address' class='far fa-copy w3-text-blue' onclick='copyAddress(randomnessInstance.address);'></i>" +
            " <i id='removeBtn' title='Remove Contract' class=\"far fa-trash-alt w3-text-red\" onclick='removeContract(\"randomnessAddr\");'></i>";
}
//If the contract has already been deployed, get instance from localstorage variable
function getInstance(){
    var randomnessAddr = localStorage.getItem("randomnessAddr");
    randomnessInstance = randomnessContract.at(randomnessAddr);
    console.log(randomnessInstance);
}

function checkWins(){
    var checkWins = document.getElementById('checkWins');
    checkWins.innerHTML = '<i class="fas fa-spinner w3-spin"></i>';
    randomnessInstance.wins.call(function(error, result){
        checkWins.innerHTML = result + ' Wins';
        if(result >= 10){
            if (!localStorage.getItem("randomnessComplete")){
                document.getElementById('levelCompleteModal').style.display='block';
                document.getElementById('levelWonBtn').style.display = 'block';
            }
            localStorage.setItem("randomnessComplete", "true");
            completedStatus();
        }
    });
}

function generateRandom(){
    var generateRandom = document.getElementById('generateRandom');
    generateRandom.innerHTML = '<i class="fas fa-spinner w3-spin"></i>';
    randomnessInstance.generateRandom.call(function(error, result){
        generateRandom.innerHTML = result;
    });
}

//send transaction to addToPot()
function guessNumber(){
    var guessInput = removeSpace(document.getElementById("guessNumberInput").value);
    if(isNaN(guessInput)){
        document.getElementById('userErrors').innerHTML = "Value must be a number";
        document.getElementById('guessNumberInput').classList.add("w3-border-red");
    } else if(guessInput <= 0 || guessInput > 10){
        document.getElementById('userErrors').innerHTML = "Guess must be between 1 and 10";
        document.getElementById('guessNumberInput').classList.add("w3-border-red");
    } else {
        randomnessInstance.guessNumber(guessInput, {gas: 212720}, function(error, result){
            if (!error) {
                document.getElementById('transactionInfo').innerHTML += "<div id="+result+"><i class=\"fas fa-spinner w3-spin\"></i><a target=\"_blank\" rel=\"noopener noreferrer\" href='https://"+networkURL+".etherscan.io/tx/"+result+"'>"+ result +" Pending... (This can take a minute)</a></div>";
                getTransaction(result);
            } else {
                console.log(error);
            }});
    }
}

function clearErrors(){
    document.getElementById('userErrors').innerHTML = "";
    document.getElementById('guessNumberInput').classList.remove("w3-border-red");
}

var Level = 1;
function getHint(){

    var hintText = document.getElementById('HintText');
    var hintBtn = document.getElementById('hintButton');
    hintText.style.display = "block";

    if(Level == "1"){
        hintText.innerHTML = "<p>The blockchain does not provide any cryptographically secure source of randomness.</p>";
        hintBtn.innerHTML = "Hint (1/2)";
        Level = 2;
        localStorage.setItem("randomnessHints", "1");
    } else if (Level == "2"){
        hintText.innerHTML += "<p>To exploit bad randomness an attacker could create a smart contract that generates numbers in the same way and submits entries where it would win.</p>";
        hintBtn.innerHTML = "Tell me how to do it";
        Level = 3;
        localStorage.setItem("randomnessHints", "2");
    } else if (Level == "3"){
        hintText.innerHTML += "<pre><code class=\"Javascript Tomorrow\">" +
                "contract winRandomness {\n" +
                "    Randomness public original = Randomness(**Deployed Contract Address**);\n" +
                "\n" +
                "    function win() public payable returns(bool) {\n" +
                "        uint winningNumber = uint(blockhash(block.number - 1)) % 10 + 1;\n" +
                "        return original.guessNumber(uint8(winningNumber));\n" +
                "    }\n" +
                "}\n" +
                "contract Randomness {\n" +
                "    function guessNumber(uint8 guess) public payable returns(bool) {}\n" +
                "}\n" +
                "</code></pre>" +
                "<p>Make sure you deploy the winRandomness contract.</p>";
        hintBtn.innerHTML = "Hint (2/2)";
        hintBtn.style.display = "none";
        document.querySelectorAll('pre code').forEach((block) => {
            hljs.highlightBlock(block);
        });
        localStorage.setItem("randomnessHints", "3");
    }
}

var updateInfo;
function refreshInfo(){
    //Call every x seconds.
    updateInfo = setInterval(function() {
        checkWins();
        generateRandom();
    }, 3000);
}

//Check LocalStorage to see if the contract has been deployed.
if (localStorage.getItem("randomnessAddr")){
    getInstance();
    updateUI();
    checkWins();
    generateRandom();
}
</script>